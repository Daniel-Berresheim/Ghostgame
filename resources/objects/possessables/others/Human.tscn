[gd_scene load_steps=13 format=2]

[ext_resource path="res://resources/objects/basic/Possessable.tscn" type="PackedScene" id=1]
[ext_resource path="res://resources/textures/objects/possessables/others/Boy.png" type="Texture" id=2]
[ext_resource path="res://resources/textures/lights/Sphere.png" type="Texture" id=3]
[ext_resource path="res://resources/sounds/HumanWalk.wav" type="AudioStream" id=4]
[ext_resource path="res://resources/sounds/HumanDie.wav" type="AudioStream" id=5]

[sub_resource type="GDScript" id=1]

script/source = "extends KinematicBody2D

# todo:
# - dying: the player falls over with an animation and sound; the screen fades out and the level resets
# - some humans have other abilities, which are shown on the sprite; e.g. cannot be possessed

# todo (later):
# - will be scared of some actions of the player and from movables
# - can run away in fear
# - maybe they have a value of how likely they are to be afraid
# - this value can be raised if it's dark, etc. and through events
# - adults could have a higher resistance to scary things

# Deadzone of controller axis.
const DEADZONE = 0.25

var alive = true

# gravity applied on the character
export var gravity = Vector2(0, 1400)

# The speed of the human will be multiplied by this value in the span of one second.
export(float) var friction = 0.000025
export(float) var air_friction = 0.000010

# Movement speed in pixels per second.
export(float) var movement_speed = 1200

# Jump strength
export(float) var jump_strength = 12000

# The current speed of the human.
var speed = Vector2(0.0, 0.0)

# Movement that actually occured since the last _physics_process.
var actual_movement = Vector2()

# True if colliding with ground.
var on_ground = true

var fall_position = 0

var was_walking = false

onready var _p = $\"Possessable\"
onready var _animation = get_node(\"AnimationPlayer\")

func _ready():
	
	_animation.play(\"Idle\")

func _physics_process(delta):
	
	# tests, whether the player is on ground
	var on_ground_new = test_move(global_transform, Vector2(0, 1))
	
	var walking = false
	
	# tests for movables on top of the human
	var collision_up = $\"CollisionUp\".get_overlapping_bodies()
	collision_up.erase(self)
	
	for i in collision_up.size():
		
		# humans die if movables fall on them
		if collision_up[i].is_in_group(\"Movables\") and collision_up[i].speed.y > 0: die()
	
	if on_ground_new:
		
		if !on_ground:
			# human dies, if fallheight is over 2.5 blocks (40 pixel)
			var fall_height = -(fall_position - global_position.y)
			
			if fall_height > 40: die()
		
		# jump
		if _p.possessed and alive:
			if Input.is_action_just_pressed(\"jump\"):
				
				speed.y = -jump_strength * delta
		
	# if on ground and possessed, calculate input direction and speed
	if _p.possessed and alive:
		var analog = _deadzone(Vector2(Input.get_joy_axis(0, JOY_AXIS_0), 0))
		if analog != Vector2():
			speed += analog * movement_speed * delta
			if on_ground_new: 
				walking = true
		else:
			if Input.is_action_pressed(\"move_right\") or Input.is_action_pressed(\"move_left\"):
				var dir = Vector2()
				dir.x += int(Input.is_action_pressed(\"move_right\")) - int(Input.is_action_pressed(\"move_left\"))
				speed += dir.normalized() * movement_speed * delta
				if on_ground_new: 
					walking = true
			
	# animation
	if walking and !was_walking: _animation.play(\"Walking\")
	elif !walking and was_walking: _animation.play(\"Idle\")
		
	was_walking = walking
		
	# looking direction
	if speed.x < 0: $\"Sprite\".flip_h = false
	elif speed.x > 0: $\"Sprite\".flip_h = true
		
	if on_ground:
		
		if !on_ground_new:
			
			# start falling
			# mark position as start point for falling
			fall_position = global_position.y
		
	else:
		
		speed += gravity * delta
		
	if on_ground_new: speed.x *= pow(friction, delta)	
	else: speed.x *= pow(air_friction, delta)
	
	on_ground = on_ground_new
	
	actual_movement = global_position
	speed = move_and_slide(speed, Vector2(0, -1))
	actual_movement = (actual_movement - global_position) / delta
	
	# moves the player along with the human
	if _p.possessed: _p.player.global_position = global_position

func die():
	
	if alive:
		# if a human dies, he plays an animation and loses his collision with Movables and other humans
		# todo: 
		# - play an dying animation
		# - the human is now unpossessable and shows no possess message
		# - the screen fades out and the level resets
		$\"AnimationPlayer\".play(\"Die\")
		alive = false
		set_collision_layer_bit(3, false)
		set_collision_mask_bit(3, false)
		$\"Possessable\".unpossess()
	
func _deadzone(axis):
	
	var length = axis.length()
	
	if length < DEADZONE:
		return Vector2()
	if length > 1:
		return axis.normalized()
	
	return axis"

[sub_resource type="CircleShape2D" id=2]

custom_solver_bias = 0.0
radius = 14.0

[sub_resource type="RectangleShape2D" id=3]

custom_solver_bias = 0.0
extents = Vector2( 5, 12 )

[sub_resource type="Animation" id=4]

resource_name = "Die"
length = 1.0
loop = false
step = 0.1
tracks/0/type = "method"
tracks/0/path = NodePath("Sounds/Die")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "play"
} ]
}

[sub_resource type="Animation" id=5]

length = 1.0
loop = true
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}

[sub_resource type="Animation" id=6]

length = 0.8
loop = true
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 1, 2, 3, 4, 5, 6, 7, 0 ]
}
tracks/1/type = "method"
tracks/1/path = NodePath("Sounds/Walk")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.1, 0.3, 0.5, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"values": [ {
"args": [  ],
"method": "play"
}, {
"args": [  ],
"method": "play"
}, {
"args": [  ],
"method": "play"
}, {
"args": [  ],
"method": "play"
} ]
}

[sub_resource type="RectangleShape2D" id=7]

custom_solver_bias = 0.0
extents = Vector2( 5, 1 )

[node name="Human" type="KinematicBody2D" index="0"]

z_index = 7
input_pickable = false
collision_layer = 8
collision_mask = 11
collision/safe_margin = 0.08
script = SubResource( 1 )
_sections_unfolded = [ "Collision", "Z Index" ]
gravity = Vector2( 0, 1400 )
friction = 2.5e-005
air_friction = 1e-005
movement_speed = 1200
jump_strength = 12000

[node name="Possessable" parent="." index="0" instance=ExtResource( 1 )]

_sections_unfolded = [ "Collision", "Transform" ]
msg_posses_offset = Vector2( 0, -16 )

[node name="PossessArea" type="CollisionShape2D" parent="Possessable" index="2"]

position = Vector2( -1, -1 )
shape = SubResource( 2 )
_sections_unfolded = [ "Transform" ]

[node name="Sprite" type="Sprite" parent="." index="1"]

texture = ExtResource( 2 )
hframes = 8
frame = 1
_sections_unfolded = [ "Animation" ]

[node name="CollisionShape2D" type="CollisionShape2D" parent="." index="2"]

position = Vector2( 0, 3 )
shape = SubResource( 3 )
_sections_unfolded = [ "Transform" ]

[node name="Light2D" type="Light2D" parent="." index="3"]

enabled = true
editor_only = false
texture = ExtResource( 3 )
offset = Vector2( 0, 0 )
texture_scale = 1.0
color = Color( 1, 1, 1, 1 )
energy = 0.6
mode = 0
range_height = 0.0
range_z_min = -1024
range_z_max = 1024
range_layer_min = 0
range_layer_max = 0
range_item_cull_mask = 1
shadow_enabled = false
shadow_color = Color( 0, 0, 0, 0 )
shadow_buffer_size = 2048
shadow_gradient_length = 0.0
shadow_filter = 0
shadow_filter_smooth = 0.0
shadow_item_cull_mask = 1

[node name="AnimationPlayer" type="AnimationPlayer" parent="." index="4"]

root_node = NodePath("..")
autoplay = ""
playback_process_mode = 1
playback_default_blend_time = 0.0
playback_speed = 1.0
anims/Die = SubResource( 4 )
anims/Idle = SubResource( 5 )
anims/Walking = SubResource( 6 )
blend_times = [  ]

[node name="Sounds" type="Node2D" parent="." index="5"]

[node name="Walk" type="AudioStreamPlayer2D" parent="Sounds" index="0"]

stream = ExtResource( 4 )
volume_db = -20.0
pitch_scale = 1.0
autoplay = false
max_distance = 2000.0
attenuation = 1.0
bus = "Effects"
area_mask = 1

[node name="Die" type="AudioStreamPlayer2D" parent="Sounds" index="1"]

stream = ExtResource( 5 )
volume_db = -10.0
pitch_scale = 1.0
autoplay = false
max_distance = 2000.0
attenuation = 1.0
bus = "Effects"
area_mask = 1

[node name="CollisionUp" type="Area2D" parent="." index="6"]

position = Vector2( 0, -9 )
input_pickable = true
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0
collision_layer = 8
collision_mask = 0
audio_bus_override = false
audio_bus_name = "Master"
_sections_unfolded = [ "Transform" ]

[node name="CollisionShape2D" type="CollisionShape2D" parent="CollisionUp" index="0"]

shape = SubResource( 7 )


