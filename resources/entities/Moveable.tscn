[gd_scene load_steps=4 format=2]

[ext_resource path="res://resources/entities/Possessable.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]

script/source = "extends KinematicBody2D

# Deadzone of controller axis.
const DEADZONE = 0.25;

export var gravity = Vector2(0, 7000);

# Movement speed in pixels per second.
export(float) var movement_speed = 1200;

# Friction of the movement.
# The player's speed will be multiplied by this value in the span of one second.
export(float) var friction = 0.00002;

# The current speed of the moveable.
var speed = Vector2(0, 0);

# True if colliding with ground.
var on_ground = true;

onready var _p = $\"Possessable\";

# Snapes the position.
func snap_falling_position():
	var gpos = global_position;
	gpos.x += sign(speed.x) * 0.01;
	global_position = gpos;
	speed.x = 0;

func _ready():
	add_user_signal(\"impact\", [\"amount\"]);

func _physics_process(delta):
	
	var on_ground_new = test_move(global_transform, Vector2(0, 1));
	
	if on_ground_new:
		
		# if the object was falling and hits the ground, it stops playing a falling sound and an impact sound occures
		if not on_ground:
			
			var snd_falling = $\"Sounds/Falling\";
			snd_falling.stop();
			
			emit_signal(\"impact\", speed.x);
			var snd_impact = $\"Sounds/Impact\";
			snd_impact.volume_db = clamp(-60 + speed.length() * 8, -60, -2);
			snd_impact.play();
		
		# if the object is possessable, the horizontal moving direction will be determined
		if $\"Possessable\".possessed:
			var analog = _deadzone(Vector2(Input.get_joy_axis(0, JOY_AXIS_0), 0));
			if analog != Vector2(0, 0):
				speed += analog * movement_speed * delta;
			else:
				var dir = Vector2(0, 0);
				dir.x += int(Input.is_action_pressed(\"move_right\")) - int(Input.is_action_pressed(\"move_left\"));
				speed += dir.normalized() * movement_speed * delta;
	else:
		
		if $\"Possessable\".possessed:
			if on_ground:
				snap_falling_position()
		
		var snd_falling = $\"Sounds/Falling\"
		if not snd_falling.is_playing():
			snd_falling.play()
			
		snd_falling.volume_db = clamp(-60 + speed.length() * 6, -60, -24)
		speed += gravity * delta
	
	on_ground = on_ground_new
	
	speed *= pow(friction, delta)
	
	move_and_slide(speed, Vector2(0, -1))
	
	
	# Move stacked blocks
	#var rc_up = get_node(\"RayCastUp\")
	
	#if rc_up.is_colliding():
		
		#var collider = rc_up.get_collider()
		
		#if abs(collider.speed.x) < abs(speed.x):
		#	 collider.speed.x = speed.x

func _deadzone(axis):
	var length = axis.length();
	
	if length < DEADZONE:
		return Vector2(0, 0);
	if length > 1:
		return axis.normalized();
	
	return axis;"

[sub_resource type="CircleShape2D" id=2]

custom_solver_bias = 0.0
radius = 24.0

[node name="Moveable" type="KinematicBody2D" index="0"]

input_pickable = false
collision_layer = 8
collision_mask = 11
collision/safe_margin = 0.08
script = SubResource( 1 )
_sections_unfolded = [ "Collision" ]
gravity = Vector2( 0, 7000 )
movement_speed = 1200
friction = 2e-005

[node name="Possessable" parent="." index="0" instance=ExtResource( 1 )]

[node name="CollisionShape" type="CollisionShape2D" parent="Possessable" index="1"]

shape = SubResource( 2 )


